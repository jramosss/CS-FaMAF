
begin proof 
        teorema
        [~ algo  : 0 = 1, otro : 1 = 2 ~]
        0
        = { algo }
        1
        = { otro }
        2
end proof

begin proof 

asjd

0
    = { teorema }
    2
end proof

begin proof
0
= { no }
0
end proof

begin proof 
        [~ algo : 0 = 0 ~]
0
= { algo }
0
end proof

begin proof 
    derivationSum 
    [~ especificacion: sum@xs = 〈∑ i : 0 ≤ i ∧ i < #xs : xs.i 〉 ~]
    induction in xs for 
        sum@xs 
        .=. 
        case xs of [] -> 0 (y ▹ ys) -> y + (sum@ys) end
    where
basic
[] -> sum@[]
      = { especificacion }
      〈 ∑ i : 0 ≤ i ∧ i < #[] : [].i 〉
      = { Longitud de la lista vacía }
      〈 ∑ i : 0 ≤ i ∧ i < 0 : [].i 〉
      = { Intervalo Vacío }
     〈 ∑ i : False : [].i 〉
      = { Rango Vacío Sumatoria }
      0
      
induction y ▹ ys with hypind -> sum@(y ▹ ys)
                                = { especificacion }
                                〈 ∑ i : 0 ≤ i ∧ i < #(y ▹ ys) : (y ▹ ys).i〉
                                = { Longitud de lista no vacía }
                                〈 ∑ i : 0 ≤ i ∧ i < succ (#ys) : (y ▹ ys).i〉
                                = { Aritmética en Intervalo }
                                〈 ∑ i : i = 0 ∨ (0 < i ∧ i < succ (#ys)) : (y ▹ ys).i〉
                                = { Partición de Rango Sumatoria }
                                〈 ∑ i : i = 0 : (y ▹ ys).i 〉 + 〈 ∑ i : 0 < i ∧ i < succ (#ys) : (y ▹ ys).i 〉
                                = { Rango Unitario Sumatoria }
                                ((y ▹ ys).0) + 〈 ∑ i : 0 < i ∧ i < succ (#ys) : (y ▹ ys).i〉
                                = { Proyectar el elemento inicial }
                                y + 〈 ∑ i : 0 < i ∧ i < succ (#ys) : (y ▹ ys).i〉
                                = { Relación entre < y ≤ }
                                y + 〈 ∑ i : succ 0 ≤ i ∧ i < succ (#ys) : (y ▹ ys).i〉
                                = { Reindizado Sumatoria }
                                y + 〈 ∑ i : 0 ≤ i ∧ i < #ys : (y ▹ ys).(succ i)〉
                                = { Proyectar el elemento (i+1) }
                                y + 〈 ∑ i : 0 ≤ i ∧ i < #ys : ys.i〉
                                = { especificacion }
                                y + (sum@ys)
end proof       


